/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CrmscriptTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    NUMBER: /[0-9]+(\.[0-9]+)?/,
    STRING: /"[^"]*"/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type Def = Expression | ExpressionBlock | NamedElement;

export const Def = 'Def';

export function isDef(item: unknown): item is Def {
    return reflection.isInstance(item, Def);
}

export type Expression = BinaryExpression | BooleanExpression | MemberCall | NilExpression | NumberExpression | StringExpression | UnaryExpression;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type NamedElement = VariableDeclaration;

export const NamedElement = 'NamedElement';

export function isNamedElement(item: unknown): item is NamedElement {
    return reflection.isInstance(item, NamedElement);
}

export type Stmt = ForStatement | IfStatement | PrintStatement | TryCatchStatement | WhileStatement;

export const Stmt = 'Stmt';

export function isStmt(item: unknown): item is Stmt {
    return reflection.isInstance(item, Stmt);
}

export type VariableDeclaration = BoolDeclaration | FloatDeclaration | IntegerDeclaration | StringDeclaration;

export const VariableDeclaration = 'VariableDeclaration';

export function isVariableDeclaration(item: unknown): item is VariableDeclaration {
    return reflection.isInstance(item, VariableDeclaration);
}

export interface BinaryExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'BinaryExpression';
    left: Expression;
    operator: '!=' | '*' | '+' | '-' | '/' | '<' | '<=' | '=' | '==' | '>' | '>=' | 'and' | 'or';
    right: Expression;
}

export const BinaryExpression = 'BinaryExpression';

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression);
}

export interface BoolDeclaration extends AstNode {
    readonly $container: ExpressionBlock | Model;
    readonly $type: 'BoolDeclaration';
    assignment: boolean;
    name: string;
    value?: Expression;
}

export const BoolDeclaration = 'BoolDeclaration';

export function isBoolDeclaration(item: unknown): item is BoolDeclaration {
    return reflection.isInstance(item, BoolDeclaration);
}

export interface BooleanExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'BooleanExpression';
    value: boolean;
}

export const BooleanExpression = 'BooleanExpression';

export function isBooleanExpression(item: unknown): item is BooleanExpression {
    return reflection.isInstance(item, BooleanExpression);
}

export interface ExpressionBlock extends AstNode {
    readonly $container: ExpressionBlock | ForStatement | IfStatement | Model | TryCatchStatement | WhileStatement;
    readonly $type: 'ExpressionBlock';
    defs: Array<Def>;
}

export const ExpressionBlock = 'ExpressionBlock';

export function isExpressionBlock(item: unknown): item is ExpressionBlock {
    return reflection.isInstance(item, ExpressionBlock);
}

export interface FloatDeclaration extends AstNode {
    readonly $container: ExpressionBlock | Model;
    readonly $type: 'FloatDeclaration';
    assignment: boolean;
    name: string;
    value?: Expression;
}

export const FloatDeclaration = 'FloatDeclaration';

export function isFloatDeclaration(item: unknown): item is FloatDeclaration {
    return reflection.isInstance(item, FloatDeclaration);
}

export interface ForStatement extends AstNode {
    readonly $container: Model;
    readonly $type: 'ForStatement';
    block: ExpressionBlock;
    condition: Expression;
    increment?: Increment;
    init?: IntegerDeclaration;
}

export const ForStatement = 'ForStatement';

export function isForStatement(item: unknown): item is ForStatement {
    return reflection.isInstance(item, ForStatement);
}

export interface IfStatement extends AstNode {
    readonly $container: Model;
    readonly $type: 'IfStatement';
    block: ExpressionBlock;
    condition: Expression;
    elseBlock?: ExpressionBlock;
}

export const IfStatement = 'IfStatement';

export function isIfStatement(item: unknown): item is IfStatement {
    return reflection.isInstance(item, IfStatement);
}

export interface Increment extends AstNode {
    readonly $container: ForStatement;
    readonly $type: 'Increment';
    var: string;
}

export const Increment = 'Increment';

export function isIncrement(item: unknown): item is Increment {
    return reflection.isInstance(item, Increment);
}

export interface IntegerDeclaration extends AstNode {
    readonly $container: ExpressionBlock | ForStatement | Model;
    readonly $type: 'IntegerDeclaration';
    assignment: boolean;
    name: string;
    value?: Expression;
}

export const IntegerDeclaration = 'IntegerDeclaration';

export function isIntegerDeclaration(item: unknown): item is IntegerDeclaration {
    return reflection.isInstance(item, IntegerDeclaration);
}

export interface MemberCall extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'MemberCall';
    arguments: Array<Expression>;
    element?: Reference<NamedElement>;
    explicitOperationCall: boolean;
    previous?: Expression;
}

export const MemberCall = 'MemberCall';

export function isMemberCall(item: unknown): item is MemberCall {
    return reflection.isInstance(item, MemberCall);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    defs: Array<Def>;
    stmts: Array<Stmt>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface NilExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'NilExpression';
    value: 'nil';
}

export const NilExpression = 'NilExpression';

export function isNilExpression(item: unknown): item is NilExpression {
    return reflection.isInstance(item, NilExpression);
}

export interface NumberExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'NumberExpression';
    value: number;
}

export const NumberExpression = 'NumberExpression';

export function isNumberExpression(item: unknown): item is NumberExpression {
    return reflection.isInstance(item, NumberExpression);
}

export interface PrintStatement extends AstNode {
    readonly $container: Model;
    readonly $type: 'PrintStatement';
    value: Expression;
}

export const PrintStatement = 'PrintStatement';

export function isPrintStatement(item: unknown): item is PrintStatement {
    return reflection.isInstance(item, PrintStatement);
}

export interface ReturnStatement extends AstNode {
    readonly $type: 'ReturnStatement';
    value?: Expression;
}

export const ReturnStatement = 'ReturnStatement';

export function isReturnStatement(item: unknown): item is ReturnStatement {
    return reflection.isInstance(item, ReturnStatement);
}

export interface StringDeclaration extends AstNode {
    readonly $container: ExpressionBlock | Model;
    readonly $type: 'StringDeclaration';
    assignment: boolean;
    name: string;
    value?: Expression;
}

export const StringDeclaration = 'StringDeclaration';

export function isStringDeclaration(item: unknown): item is StringDeclaration {
    return reflection.isInstance(item, StringDeclaration);
}

export interface StringExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'StringExpression';
    value: string;
}

export const StringExpression = 'StringExpression';

export function isStringExpression(item: unknown): item is StringExpression {
    return reflection.isInstance(item, StringExpression);
}

export interface TryCatchStatement extends AstNode {
    readonly $container: Model;
    readonly $type: 'TryCatchStatement';
    block: ExpressionBlock;
    catchBlock: ExpressionBlock;
    exception: string;
}

export const TryCatchStatement = 'TryCatchStatement';

export function isTryCatchStatement(item: unknown): item is TryCatchStatement {
    return reflection.isInstance(item, TryCatchStatement);
}

export interface UnaryExpression extends AstNode {
    readonly $container: BinaryExpression | BoolDeclaration | ExpressionBlock | FloatDeclaration | ForStatement | IfStatement | IntegerDeclaration | MemberCall | Model | PrintStatement | ReturnStatement | StringDeclaration | UnaryExpression | WhileStatement;
    readonly $type: 'UnaryExpression';
    operator: '!' | '+' | '-';
    value: Expression;
}

export const UnaryExpression = 'UnaryExpression';

export function isUnaryExpression(item: unknown): item is UnaryExpression {
    return reflection.isInstance(item, UnaryExpression);
}

export interface WhileStatement extends AstNode {
    readonly $container: Model;
    readonly $type: 'WhileStatement';
    block: ExpressionBlock;
    condition: Expression;
}

export const WhileStatement = 'WhileStatement';

export function isWhileStatement(item: unknown): item is WhileStatement {
    return reflection.isInstance(item, WhileStatement);
}

export type CrmscriptAstType = {
    BinaryExpression: BinaryExpression
    BoolDeclaration: BoolDeclaration
    BooleanExpression: BooleanExpression
    Def: Def
    Expression: Expression
    ExpressionBlock: ExpressionBlock
    FloatDeclaration: FloatDeclaration
    ForStatement: ForStatement
    IfStatement: IfStatement
    Increment: Increment
    IntegerDeclaration: IntegerDeclaration
    MemberCall: MemberCall
    Model: Model
    NamedElement: NamedElement
    NilExpression: NilExpression
    NumberExpression: NumberExpression
    PrintStatement: PrintStatement
    ReturnStatement: ReturnStatement
    Stmt: Stmt
    StringDeclaration: StringDeclaration
    StringExpression: StringExpression
    TryCatchStatement: TryCatchStatement
    UnaryExpression: UnaryExpression
    VariableDeclaration: VariableDeclaration
    WhileStatement: WhileStatement
}

export class CrmscriptAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['BinaryExpression', 'BoolDeclaration', 'BooleanExpression', 'Def', 'Expression', 'ExpressionBlock', 'FloatDeclaration', 'ForStatement', 'IfStatement', 'Increment', 'IntegerDeclaration', 'MemberCall', 'Model', 'NamedElement', 'NilExpression', 'NumberExpression', 'PrintStatement', 'ReturnStatement', 'Stmt', 'StringDeclaration', 'StringExpression', 'TryCatchStatement', 'UnaryExpression', 'VariableDeclaration', 'WhileStatement'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case BinaryExpression:
            case BooleanExpression:
            case MemberCall:
            case NilExpression:
            case NumberExpression:
            case StringExpression:
            case UnaryExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case BoolDeclaration:
            case FloatDeclaration:
            case IntegerDeclaration:
            case StringDeclaration: {
                return this.isSubtype(VariableDeclaration, supertype);
            }
            case Expression:
            case ExpressionBlock:
            case NamedElement: {
                return this.isSubtype(Def, supertype);
            }
            case ForStatement:
            case IfStatement:
            case PrintStatement:
            case TryCatchStatement:
            case WhileStatement: {
                return this.isSubtype(Stmt, supertype);
            }
            case VariableDeclaration: {
                return this.isSubtype(NamedElement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'MemberCall:element': {
                return NamedElement;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'BinaryExpression': {
                return {
                    name: 'BinaryExpression',
                    properties: [
                        { name: 'left' },
                        { name: 'operator' },
                        { name: 'right' }
                    ]
                };
            }
            case 'BoolDeclaration': {
                return {
                    name: 'BoolDeclaration',
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case 'BooleanExpression': {
                return {
                    name: 'BooleanExpression',
                    properties: [
                        { name: 'value', defaultValue: false }
                    ]
                };
            }
            case 'ExpressionBlock': {
                return {
                    name: 'ExpressionBlock',
                    properties: [
                        { name: 'defs', defaultValue: [] }
                    ]
                };
            }
            case 'FloatDeclaration': {
                return {
                    name: 'FloatDeclaration',
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case 'ForStatement': {
                return {
                    name: 'ForStatement',
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'increment' },
                        { name: 'init' }
                    ]
                };
            }
            case 'IfStatement': {
                return {
                    name: 'IfStatement',
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'elseBlock' }
                    ]
                };
            }
            case 'Increment': {
                return {
                    name: 'Increment',
                    properties: [
                        { name: 'var' }
                    ]
                };
            }
            case 'IntegerDeclaration': {
                return {
                    name: 'IntegerDeclaration',
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case 'MemberCall': {
                return {
                    name: 'MemberCall',
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'element' },
                        { name: 'explicitOperationCall', defaultValue: false },
                        { name: 'previous' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    properties: [
                        { name: 'defs', defaultValue: [] },
                        { name: 'stmts', defaultValue: [] }
                    ]
                };
            }
            case 'NilExpression': {
                return {
                    name: 'NilExpression',
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case 'NumberExpression': {
                return {
                    name: 'NumberExpression',
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case 'PrintStatement': {
                return {
                    name: 'PrintStatement',
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case 'ReturnStatement': {
                return {
                    name: 'ReturnStatement',
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case 'StringDeclaration': {
                return {
                    name: 'StringDeclaration',
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case 'StringExpression': {
                return {
                    name: 'StringExpression',
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case 'TryCatchStatement': {
                return {
                    name: 'TryCatchStatement',
                    properties: [
                        { name: 'block' },
                        { name: 'catchBlock' },
                        { name: 'exception' }
                    ]
                };
            }
            case 'UnaryExpression': {
                return {
                    name: 'UnaryExpression',
                    properties: [
                        { name: 'operator' },
                        { name: 'value' }
                    ]
                };
            }
            case 'WhileStatement': {
                return {
                    name: 'WhileStatement',
                    properties: [
                        { name: 'block' },
                        { name: 'condition' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CrmscriptAstReflection();
